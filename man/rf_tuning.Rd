% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rf_tuning.R
\name{rf_tuning}
\alias{rf_tuning}
\title{Tuning of random forest hyperparameters via spatial cross-validation}
\usage{
rf_tuning(
  model = NULL,
  num.trees = c(100, 1000),
  mtry = c(3, 6),
  min.node.size = c(5, 20),
  max.depth = c(3, 6),
  xy = NULL,
  repetitions = 30,
  training.fraction = 0.75,
  seed = 1,
  verbose = TRUE,
  n.cores = parallel::detectCores() - 1,
  cluster = NULL
)
}
\arguments{
\item{model}{A model fitted with \code{\link[=rf]{rf()}}. If provided, the training data is taken directly from the model definition (stored in \code{model$ranger.arguments}). Default: \code{NULL}}

\item{num.trees}{Numeric integer vector with the number of trees to fit on each model repetition. Default: \code{c(100, 1000)}.}

\item{mtry}{Numeric integer vector, number of predictors to randomly select from the complete pool of predictors on each tree split. Default: \code{c(3, 6)}}

\item{min.node.size}{Numeric integer, minimal number of cases in a terminal node. Default: \code{c(5, 20)}}

\item{max.depth}{Numeric integer, maximal tree depth. \code{max.depth} and \code{min.node.size} cannot be used together in a model, so whenever the user provides values for both, separate models for the different values of \code{min.node.size} and \code{max.depth} will be compared. Default: \code{c(3, 6)}}

\item{xy}{Data frame or matrix with two columns containing coordinates and named "x" and "y". If \code{NULL}, the function will throw an error. Default: \code{NULL}}

\item{repetitions}{Integer, number of independent spatial folds to use during the cross-validation. Default: \code{30}.}

\item{training.fraction}{Proportion between 0.2 and 0.9 indicating the number of records to be used in model training. Default: \code{0.75}}

\item{seed}{Integer, random seed to facilitate reproduciblity. If set to a given number, the results of the function are always the same. Default: \code{1}.}

\item{verbose}{Logical. If TRUE, messages and plots generated during the execution of the function are displayed, Default: \code{TRUE}}

\item{n.cores}{Integer, number of cores used by #' @param n.cores Integer, number of cores used by \code{\link[ranger]{ranger}} for parallel execution (used as value for the argument \code{num.threads} in \code{ranger()}). Default: \code{NULL}}

\item{cluster}{A cluster definition generated with \code{parallel::makeCluster()} or \code{\link{start_cluster}}. Only advisable if you need to spread a large number of repetitions over the nodes of a large cluster when working with large data. If provided, overrides \code{n.cores}. The function does not stop a cluster, please remember to shut it down with \code{parallel::stopCluster(cl = cluster_name)} or \code{spatialRF::stop_cluster()} at the end of your pipeline. Default: \code{NULL}}
}
\value{
A model with a new slot named \code{tuning}, with a data frame with the results of the tuning analysis.
}
\description{
Finds the optimal set of random forest hyperparameters \code{num.trees}, \code{mtry}, and \code{min.node.size} via grid search by maximizing the model's R squared, or AUC, if the response variable is binomial, via spatial cross-validation performed with \code{\link[=rf_evaluate]{rf_evaluate()}}.
}
\examples{
if(interactive()){

#loading example data
data(
  ecoregions_df,
  ecoregions_distance_matrix,
  ecoregions_predictor_variable_names,
  ecoregions_dependent_variable_name
  )

#fitting model to tune
out <- rf(
  data = ecoregions_df,
  dependent.variable.name = ecoregions_dependent_variable_name,
  predictor.variable.names = ecoregions_predictor_variable_names,
  distance.matrix = ecoregions_distance_matrix,
  distance.thresholds = 0,
  n.cores = 1,
  verbose = FALSE
)

#model tuning
#please replace "n.cores = 1" with
#n.cores = parallel::detectCores() - 1"
#to improve performance
tuning <- rf_tuning(
  model = out,
  num.trees = c(100, 500),
  mtry = c(2, 8),
  min.node.size = c(5, 10),
  xy = ecoregions_df[, c("x", "y")],
  n.cores = 1
)

#using the pipe and a cluster
#please replace "cluster.cores = 1" with
#"cluster.cores = parallel::detectCores() - 1"

library(magrittr)
cluster <- start_cluster(cluster.cores = 1)

out <- rf(
  data = ecoregions_df,
  dependent.variable.name = ecoregions_dependent_variable_name,
  predictor.variable.names = ecoregions_predictor_variable_names,
  distance.matrix = ecoregions_distance_matrix,
  xy = ecoregions_df[, c("x", "y")],
  distance.thresholds = 0,
  n.cores = 1
) \%>\%
tuning <- rf_tuning(
  num.trees = c(100, 500),
  mtry = c(2, 8),
  min.node.size = c(5, 10)
)

spatialRF::stop_cluster()

}
}
\seealso{
\code{\link[=rf_evaluate]{rf_evaluate()}}
}
