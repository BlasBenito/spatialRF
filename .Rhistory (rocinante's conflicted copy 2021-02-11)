}
}
#find duplicates in "variable"
variable.duplicated <- duplicated(x$variable)
variable.duplicated
sum(variable.duplicated) == 0
x <- rf.repeat
#if x is not a data frame
if(!is.data.frame(x)){
#importance from rf
if(inherits(x, "rf") & !inherits(x, "rf_spatial")){
x <- x$variable.importance$per.variable
}
#importance from rf_repeat
if(inherits(x, "rf_repeat") & !inherits(x, "rf_spatial")){
x <- x$variable.importance$per.repetition
}
#importance from rf_spatial and rf
if(inherits(x, "rf_spatial")){
x <- x$variable.importance$spatial.predictors
}
}
x
variable.duplicated
x <- rf.repeat
#if x is not a data frame
if(!is.data.frame(x)){
#importance from rf
if(inherits(x, "rf") & !inherits(x, "rf_spatial")){
x <- x$variable.importance$per.variable
}
#importance from rf_repeat
if(inherits(x, "rf_repeat") & !inherits(x, "rf_spatial")){
x <- x$variable.importance$per.repetition
}
#importance from rf_spatial and rf
if(inherits(x, "rf_spatial")){
x <- x$variable.importance$spatial.predictors
}
}
x
variable.duplicated <- duplicated(x$variable)
variable.duplicated
rf.spatial$variable.importance$spatial.predictors
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/plot_importance.R')
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/rf.R')
rf.model <- rf(
data = plant_richness_df,
dependent.variable.name = "richness_species_vascular",
predictor.variable.names = colnames(plant_richness_df)[5:21],
distance.matrix = distance_matrix,
distance.thresholds = c(0, 1000, 2000),
verbose = FALSE
)
ggplot2::ggplot(data = x) +
ggplot2::aes(
x = importance,
y = reorder(
variable,
importance,
FUN = median
),
fill = reorder(
variable,
importance,
FUN = median
)
) +
ggplot2::geom_boxplot() +
ggplot2::scale_fill_viridis_d(direction = -1, alpha = 0.8) +
ggplot2::ylab("") +
ggplot2::xlab("Variable importance") +
ggplot2::theme(legend.position = "none")
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/rf.R')
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/rf_repeat.R')
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/plot_importance.R')
x
variable.duplicated
#spatial model
rf.spatial <- rf_spatial(model = rf.model)
rf.model <- rf(
data = plant_richness_df,
dependent.variable.name = "richness_species_vascular",
predictor.variable.names = colnames(plant_richness_df)[5:21],
distance.matrix = distance_matrix,
distance.thresholds = c(0, 1000, 2000),
verbose = FALSE
)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/rf.R')
rf.model <- rf(
data = plant_richness_df,
dependent.variable.name = "richness_species_vascular",
predictor.variable.names = colnames(plant_richness_df)[5:21],
distance.matrix = distance_matrix,
distance.thresholds = c(0, 1000, 2000),
verbose = FALSE
)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/plot_importance.R')
rf.model <- rf(
data = plant_richness_df,
dependent.variable.name = "richness_species_vascular",
predictor.variable.names = colnames(plant_richness_df)[5:21],
distance.matrix = distance_matrix,
distance.thresholds = c(0, 1000, 2000),
verbose = FALSE
)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/rf.R')
rf.model <- rf(
data = plant_richness_df,
dependent.variable.name = "richness_species_vascular",
predictor.variable.names = colnames(plant_richness_df)[5:21],
distance.matrix = distance_matrix,
distance.thresholds = c(0, 1000, 2000),
verbose = FALSE
)
rf.model <- rf(
data = plant_richness_df,
dependent.variable.name = "richness_species_vascular",
predictor.variable.names = colnames(plant_richness_df)[5:21],
distance.matrix = distance_matrix,
distance.thresholds = c(0, 1000, 2000),
verbose = TRUE
)
plot_importance(rf.model)
#with repetitions
rf.repeat <- rf_repeat(model = rf.model, verbose = FALSE)
#with repetitions
rf.repeat <- rf_repeat(model = rf.model, verbose = TRUE)
#spatial model
rf.spatial <- rf_spatial(model = rf.model, verbose = FALSE)
plot_importance(rf.spatial)
x <- rf.spatial
#if x is not a data frame
if(!is.data.frame(x)){
#importance from rf
if(inherits(x, "rf") & !inherits(x, "rf_spatial")){
x <- x$variable.importance$per.variable
}
#importance from rf_repeat
if(inherits(x, "rf_repeat") & !inherits(x, "rf_spatial")){
x <- x$variable.importance$per.repetition
}
#importance from rf_spatial and rf
if(inherits(x, "rf_spatial")){
x <- x$variable.importance$spatial.predictors
}
}
x
variable.duplicated <- duplicated(x$variable)
sum(variable.duplicated) == 0
!("spatial_predictors" %in% x$variable)
"spatial_predictors" %in% x$variable
#find duplicates in "variable"
variable.duplicated <- duplicated(x$variable)
variable.duplicated
#find predictors that are not not spatial_predictors
predictors <- x$variable[x$variable != "spatial_predictors"]
predictors
duplicated(x$variable[x$variable != "spatial_predictors"])
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/plot_importance.R')
#spatial model
rf.spatial <- rf_spatial(model = rf.model, verbose = TRUE)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/rf_spatial.R')
#spatial model
rf.spatial <- rf_spatial(model = rf.model, verbose = TRUE)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/rf_spatial.R')
#spatial model
rf.spatial <- rf_spatial(model = rf.model, verbose = TRUE)
#from repeat
rf.spatial.repeat <- rf_spatial(model = rf.repeat)
sinew::makeOxygen(plot_importance)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/plot_importance.R')
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/plot_importance.R')
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/rf.R')
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/rf_spatial.R')
devtools::load_all()
data(plant_richness_df)
data(distance.matrix)
#basic model
rf.model <- rf(
data = plant_richness_df,
dependent.variable.name = "richness_species_vascular",
predictor.variable.names = colnames(plant_richness_df)[5:21],
distance.matrix = distance_matrix,
distance.thresholds = c(0, 1000, 2000),
verbose = TRUE
)
#with repetitions
rf.repeat <- rf_repeat(model = rf.model, verbose = TRUE)
#spatial model
rf.spatial <- rf_spatial(model = rf.model, verbose = TRUE)
rf.spatial <- rf_spatial(model = rf.model, method = "mem.effect.optimized")
#from repeat
rf.spatial.repeat <- rf_spatial(model = rf.repeat)
rf.spatial <- rf_spatial(model = rf.model, method = "hengl")
rf.spatial.repeat <- rf_spatial(model = rf.repeat, method = "hengl")
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/select_spatial_predictors_optimized.R')
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/select_spatial_predictors_sequential.R')
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/rf_repeat.R')
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/rf_repeat.R')
rf.spatial$variable.importance
names(rf.spatial$variable.importance)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/rf_spatial.R')
devtools::load_all()
help(auto_cor)
devtools::load_all()
help(auto_cor)
help("auto_cor")
??auto_cor
help(auto_vif)
attachment::att_from_description()
devtools::document()
devtools::load_all()
help(auto_cor)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/auto_cor.R')
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/auto_cor.R')
attachment::att_from_description()
devtools::document()
help(auto_cor)
attachment::att_from_description()
devtools::document()
help(auto_cor)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/auto_cor.R')
help(auto_vif)
attachment::att_from_description()
devtools::document()
help(auto_vif)
attachment::att_from_description()
devtools::document()
help(auto_vif)
attachment::att_from_description()
devtools::document()
help(auto_vif)
attachment::att_from_description()
devtools::document()
help(auto_vif)
attachment::att_from_description()
devtools::document()
help(auto_cor)
help(cluster_specification)
help(distance_matrix)
help(double_center_distance_matrix)
attachment::att_from_description()
devtools::document()
help(double_center_distance_matrix)
help(make_spatial_fold)
help(mem_multithreshold)
help(mem)
attachment::att_from_description()
devtools::document()
devtools::check()
test_that("`rf()` works", {
data("plant_richness_df")
data("distance_matrix")
out <- rf(
data = plant_richness_df,
dependent.variable.name = "richness_species_vascular",
predictor.variable.names = colnames(plant_richness_df)[5:21],
distance.matrix = distance_matrix,
distance.thresholds = c(0,100, 1000, 10000)
)
expect_s3_class(out, "ranger")
expect_s3_class(out$variable.importance$per.variable, "data.frame")
expect_named(out$variable.importance$per.variable, c("variable", "importance"))
expect_s3_class(out$spatial.correlation.residuals$per.distance.threshold, "data.frame")
expect_named(out$spatial.correlation.residuals$per.distance.threshold, c("distance.threshold", "moran.i", "p.value", "interpretation"))
})
data("plant_richness_df")
data("distance_matrix")
out <- rf(
data = plant_richness_df,
dependent.variable.name = "richness_species_vascular",
predictor.variable.names = colnames(plant_richness_df)[5:21],
distance.matrix = distance_matrix,
distance.thresholds = c(0,100, 1000, 10000),
verbose = FALSE
)
expect_s3_class(out, "ranger")
expect_s3_class(out$variable.importance$per.variable, "data.frame")
out$variable.importance$per.variable
out$variable.importance$per.variable
test_that("`rf()` works", {
data("plant_richness_df")
data("distance_matrix")
out <- rf(
data = plant_richness_df,
dependent.variable.name = "richness_species_vascular",
predictor.variable.names = colnames(plant_richness_df)[5:21],
distance.matrix = distance_matrix,
distance.thresholds = c(0,100, 1000, 10000),
verbose = FALSE
)
expect_s3_class(out, "ranger")
expect_s3_class(out, "RF")
expect_s3_class(out$variable.importance$per.variable, "data.frame")
expect_named(out$variable.importance$per.variable, c("variable", "importance"))
expect_s3_class(out$spatial.correlation.residuals$per.distance, "data.frame")
expect_named(out$spatial.correlation.residuals$per.distance, c("distance.threshold", "moran.i", "p.value", "interpretation"))
})
test_that("`rf()` works", {
data("plant_richness_df")
data("distance_matrix")
out <- rf(
data = plant_richness_df,
dependent.variable.name = "richness_species_vascular",
predictor.variable.names = colnames(plant_richness_df)[5:21],
distance.matrix = distance_matrix,
distance.thresholds = c(0,100, 1000, 10000),
verbose = FALSE
)
expect_s3_class(out, "ranger")
expect_s3_class(out, "rf")
expect_s3_class(out$variable.importance$per.variable, "data.frame")
expect_named(out$variable.importance$per.variable, c("variable", "importance"))
expect_s3_class(out$spatial.correlation.residuals$per.distance, "data.frame")
expect_named(out$spatial.correlation.residuals$per.distance, c("distance.threshold", "moran.i", "p.value", "interpretation"))
})
data("plant_richness_df")
data("distance_matrix")
out <- rf_repeat(
data = plant_richness_df,
dependent.variable.name = "richness_species_vascular",
predictor.variable.names = colnames(plant_richness_df)[5:21],
distance.matrix = distance_matrix,
distance.thresholds = c(0,100, 1000, 10000),
repetitions = 10,
n.cores = 1
)
expect_s3_class(out, "ranger")
expect_s3_class(out, "rf_repeat")
expect_s3_class(out$variable.importance$per.variable, "data.frame")
out$spatial.correlation.residuals$per.distance
test_that("`rf_repeat()` works", {
data("plant_richness_df")
data("distance_matrix")
out <- rf_repeat(
data = plant_richness_df,
dependent.variable.name = "richness_species_vascular",
predictor.variable.names = colnames(plant_richness_df)[5:21],
distance.matrix = distance_matrix,
distance.thresholds = c(0,100, 1000, 10000),
repetitions = 10,
n.cores = 1,
verbose = FALSE
)
expect_s3_class(out, "ranger")
expect_s3_class(out, "rf_repeat")
expect_s3_class(out$variable.importance$per.variable, "data.frame")
expect_s3_class(out$spatial.correlation.residuals$per.distance, "data.frame")
expect_named(out$spatial.correlation.residuals$per.distance, c("distance.threshold", "moran.i", "p.value", "interpretation"))
})
data(distance_matrix)
data(plant_richness_df)
moran.out <- moran_multithreshold(
x = plant_richness_df$richness_species_vascular,
distance.matrix = distance_matrix,
distance.thresholds = c(0, 100, 1000),
verbose = FALSE
)
expect_type(moran.out, "list")
expect_s3_class(moran.out$df, "data.frame")
moran.out$plot
test_that("`moran_multithreshold()` works", {
data(distance_matrix)
data(plant_richness_df)
moran.out <- moran_multithreshold(
x = plant_richness_df$richness_species_vascular,
distance.matrix = distance_matrix,
distance.thresholds = c(0, 100, 1000),
verbose = FALSE
)
expect_type(moran.out, "list")
expect_s3_class(moran.out$per.distance, "data.frame")
expect_named(moran.out$per.distance, c("distance.threshold", "moran.i", "p.value", "interpretation"))
expect_s3_class(moran.out$plot, "ggplot")
expect_length(moran.out, 4)
expect_named(moran.out, c("df", "plot", "max.moran", "max.moran.distance.threshold"))
})
names(moran.out)
attachment::att_from_description()
devtools::document()
devtools::check()
devtools::load_all()
data(plant_richness_df)
data(distance.matrix)
#basic model
rf.model <- rf(
data = plant_richness_df,
dependent.variable.name = "richness_species_vascular",
predictor.variable.names = colnames(plant_richness_df)[5:21],
distance.matrix = distance_matrix,
distance.thresholds = c(0, 1000, 2000),
verbose = TRUE
)
print(rf.model)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/rf.R')
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/print_moran.R')
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/rf.R')
rf.model <- rf(
data = plant_richness_df,
dependent.variable.name = "richness_species_vascular",
predictor.variable.names = colnames(plant_richness_df)[5:21],
distance.matrix = distance_matrix,
distance.thresholds = c(0, 1000, 2000),
verbose = TRUE
)
#with repetitions
rf.repeat <- rf_repeat(model = rf.model, verbose = TRUE)
#spatial model
rf.spatial <- rf_spatial(model = rf.model, verbose = TRUE)
print(rf.spatial)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/print.R')
print(rf.spatial)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/print.R')
print(rf.spatial)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/print.R')
print(rf.spatial)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/rf_spatial.R')
#spatial model
rf.spatial <- rf_spatial(model = rf.model, verbose = TRUE)
rf.repeat$performance
x <- rf.repeat
inherits(x, "rf_repeat")
x.mean <- apply(x, "mean")
x.mean <- apply(x, FUN = mean)
x <- x$performance
x
apply(x, FUN = mean)
sapply(x, FUN = mean)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/standard_error.R')
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/print.R')
x.se <- sapply(x, FUN = standard_error)
x.sd <- sapply(x, FUN = sd)
x.se
x.sd
x$performance
rf.repeat$performance
x <- rf.model
unlist(x$performance)
x <- rf.repeat
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/get_performance.R')
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/get_performance.R')
get_performance(rf.model)
get_performance(rf.model)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/get_performance.R')
get_performance(rf.model)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/get_performance.R')
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/get_performance.R')
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/print_performance.R')
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/print_performance.R')
print_performance(rf.model)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/print_performance.R')
print_performance(rf.model)
print_performance(rf.repeat)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/print.R')
print(rf.model)
sinew::makeOxygen(get_performance)
exampletestr::make_test_shell_fun("plot_moran", open = FALSE)
sinew::makeOxygen(get_performance)
get_performance(rf.repeat)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/get_performance.R')
print_performance(rf.repeat)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/get_performance.R')
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/get_performance.R')
exampletestr::make_test_shell_fun("get_performance", open = FALSE)
exampletestr::make_test_shell_fun("get_performance", open = FALSE)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/get_performance.R')
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/get_performance.R')
exampletestr::make_test_shell_fun("get_performance", open = FALSE)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/get_performance.R')
get_performance(rf.repeat)
sinew::makeOxygen(print_performance)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/print_performance.R')
round(NA, 2)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/get_performance.R')
rf.model$performance
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/get_performance.R')
get_performance(rf.repeat)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/get_performance.R')
sinew::makeOxygen(standard_error)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/standard_error.R')
standard_error(runif(10))
standard_error(runif(10))
standard_error(runif(10))
standard_error(runif(10))
standard_error(runif(10))
standard_error(runif(10))
standard_error(runif(10))
standard_error(runif(10))
runif(10)
attachment::att_from_description()
devtools::document()
devtools::check()
data(plant_richness_df)
data(distance.matrix)
#basic model
rf.model <- rf(
data = plant_richness_df,
dependent.variable.name = "richness_species_vascular",
predictor.variable.names = colnames(plant_richness_df)[5:21],
distance.matrix = distance_matrix,
distance.thresholds = c(0, 1000, 2000),
verbose = TRUE
)
#with repetitions
rf.repeat <- rf_repeat(model = rf.model, verbose = TRUE)
#spatial model
rf.spatial <- rf_spatial(model = rf.model, verbose = TRUE)
#from repeat
rf.spatial.repeat <- rf_spatial(model = rf.repeat)
source('~/Dropbox/GITHUB/R_packages/spatialRF/R/rf_repeat.R')
devtools::load_all()
