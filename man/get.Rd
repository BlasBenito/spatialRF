% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get.R
\name{get_evaluation_aggregated}
\alias{get_evaluation_aggregated}
\alias{get_evaluation}
\alias{get_evaluation_folds}
\alias{get_importance}
\alias{get_importance_local}
\alias{get_moran}
\alias{get_residuals}
\alias{get_performance}
\alias{get_predictions}
\alias{get_jackknife}
\alias{get_select}
\alias{get_spatial_predictors}
\title{Functions to retrieve data from a fitted model.}
\usage{
get_evaluation_aggregated(model)

get_evaluation(model)

get_evaluation_folds(model)

get_importance(model)

get_importance_local(model)

get_moran(model)

get_residuals(model)

get_performance(model)

get_predictions(model)

get_jackknife(model)

get_select(model)

get_spatial_predictors(model)
}
\arguments{
\item{model}{A model fitted with \code{\link[=rf_evaluate]{rf_evaluate()}}.}
}
\value{
Functions to get permutation importance scores from any model type (fitted with \code{spatialRF}):
\itemize{
\item \code{get_importance()}: data frame with permutation importance scores for each model predictor. If the model too many spatial predictors, then the function returns the statistics of importance of the model predictors (the one stored in \code{model$importance$spatial_predictors.stats}).
\item \code{get_importance_local()} data frame with the permutation error on the out-of-bag data of each predictor on each location.
}

Functions to get residuals and results of residuals autocorrelation tests.
\itemize{
\item \code{get_moran()}: data frame with the results of the Moran's I test on the model residuals for the distances introduced in the argument \code{distance.thresholds}.
\item \code{get_residuals()}: numeric vector with the model residuals in the same order as training data frame introduced via the argument \code{data}.
}

Functions to get evaluation objects from models fitted with \code{\link[=rf_evaluate]{rf_evaluate()}}:
\itemize{
\item \code{get_evaluation_aggregated()}: data frame with statistics (median, median absolute deviation, first quartile, third quartile, mean, standard error, standard deviation, minimum, and maximum) of training and testing performance scores from a model fitted with \code{\link[=rf_evaluate]{rf_evaluate()}}.
\item \code{get_evaluation()}: data frame with one row of performance scores for every pair of training and testing folds.
\item \code{get_evaluation_folds()}: list with training and testing folds used by \code{\link[=rf_evaluate]{rf_evaluate()}}.
}

Functions to get objects related with the model performance and predictions
\itemize{
\item \code{get_performance()}: data frame with performance metrics that can be either computed from the out-of-bag data (rsquared_oob and rmse_oob) or by comparing the response variable with the predictions for all cases (rsquared, rmse, nrmse). For models fitted with \code{\link[=rf_repeat]{rf_repeat()}}, the median and median absolute deviation of the performances are shown.
\item \code{get_predictions()}: numeric vector of model predictions or median of model predictions if the model was fitted with \code{\link[=rf_repeat]{rf_repeat()}}.
}

Function to get the data frame resulting from \code{\link[=rf_jackknife]{rf_jackknife()}}.
\itemize{
\item \code{get_jackknife()}: data frame with jackknife results (model performance computed via spatial cross-validation for different metrics comparing models fitted with all predictors, all predictors except one, and that one predictor alone).
}

Function to get the spatial predictors used by \code{\link[=rf_spatial]{rf_spatial()}} to fit a model.
\itemize{
\item \code{get_spatial_predictors()}: data frame with the spatial predictors used to fit the model.
}
}
\description{
All \code{get_xxx()} functions retrieve useful information from a fitted model.
}
\examples{
if(interactive()){

#loading example data
data(
  ecoregions_df,
  ecoregions_distance_matrix,
  ecoregions_numeric_predictors,
  ecoregions_continuous_response
  )

 #fitting a random forest model
 model <- rf(
   data = ecoregions_df,
   response.name = ecoregions_continuous_response,
   predictors.names = ecoregions_numeric_predictors,
   distance.matrix = ecoregions_distance_matrix,
   distance.thresholds = c(0, 100, 1000),
   n.cores = 1,
   verbose = FALSE
 )

 #getting permutation importance data frame
 get_importance(model = model)

 #local permutation importance
 get_importance_local(model = model)

 #model residuals
 get_residuals(model = model)

 #Moran's I test of the model residuals
 get_moran(model = model)

 #get model performance
 get_performance(model = model)

 #get model predictions
 get_predictions(model = model)

#evaluating the model with spatial cross-validation
model <- rf_evaluate(
  model = model,
  xy = ecoregions_df[, c("x", "y")],
  n.cores = 1,
  verbose = FALSE
)

#getting evaluation results aggregated over spatial folds
get_evaluation_aggregated(model = model)

#get evaluation scores per spatial fold
get_evaluation(model = model)

#get list with indices of training and testing cases
#on each evaluation iteration
get_evaluation_folds(model = model)


#fitting a spatial model
model <- rf_spatial(model = model)

#data frame of spatial predictors used to fit the model
get_spatial_predictors(model = model)

}
}
